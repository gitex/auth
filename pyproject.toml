[project]
name = "auth"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "aioredis>=2.0.1",
    "alembic>=1.16.5",
    "antidote>=2.0.0",
    "asyncpg>=0.30.0",
    "dependency-injector>=4.48.2",
    "fastapi[standard]>=0.118.0",
    "passlib[argon2]>=1.7.4",
    "pydantic>=2.11.9",
    "pydantic-settings>=2.11.0",
    "python-jose[cryptography]>=3.5.0",
    "sqlalchemy>=2.0.43",
    "uvicorn>=0.37.0",
]

[dependency-groups]
dev = [
    "asgi-lifespan>=2.1.0",
    "factory-boy>=3.3.3",
    "faker>=37.8.0",
    "flake8>=7.3.0",
    "freezegun>=1.5.5",
    "httpx>=0.28.1",
    "hypothesis>=6.140.2",
    "isort>=6.1.0",
    "mypy>=1.18.2",
    "polyfactory>=2.22.2",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-alembic>=0.12.1",
    "pytest-async>=0.1.1",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-pretty>=1.3.0",
    "pytest-sugar>=1.1.1",
    "pytest-testmon>=2.1.3",
    "pytest-timeout>=2.4.0",
    "pytest-watch>=4.2.0",
    "pytest-xdist>=3.8.0",
    "ruff>=0.13.3",
    "sqlalchemy-utils>=0.42.0",
    "time-machine>=2.19.0",
    "types-passlib>=1.7.7.20250602",
    "types-python-jose>=3.5.0.20250531",
    "wemake-python-styleguide>=1.4.0",
]


# ==== BasedPyright ===== (https://docs.basedpyright.com/v1.20.0/configuration/config-files/)
[tool.basedpyright]
# include = ["src", "tests"]
# pythonVersion = "3.12"
# venv = ".venv"


# ==== Ruff ==== (https://docs.astral.sh/ruff/settings)
[tool.ruff]
src = ["src"]
preview = true
fix = true
line-length = 90
target-version = "py312"
extend-exclude = [".venv", "migrations"]

[tool.ruff.lint]
select = [
  "A",    # flake8-builtins
  "ANN",
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  # "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  # "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "T20",
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
ignore = [
    "E203",
    "PLR6301", # do not require classmethod / staticmethod when self not used
    "E501",
    "D100", # do not need docstring on top of the file
    "D104", # do not need package docstrings
    "ISC001",  # implicit string concat conflicts with `ruff format`
    "COM812",  # conflict with `rust format`
    "TRY003",  # Long messages outside exception class
    "RUF002",  # always errors about comments in russian
    "RUF003",  # same as 002
]
external = [ "WPS" ]

flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.ruff.format]
quote-style = "single"
line-ending = "lf"
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
"migrations/*.py" = ["D101", "E501", "RUF012"]
"*/presentation/exception_handlers*" = [
    "RUF029",  # FastAPI exception handlers can be awaitable, but may not use async futures
]
"tests/**" = [
    "S101", # Enable assert in tests
    "D104", # Package docstring not needed in tests (at least for now)
    "D100", # Module docstring not needed in tests (at least for now)
    "S105",  # Allow hardcoded passwords in tests, it's not security leak
]
"test_*.py" = [
    "ANN201",  # Tests do not need to have return type, they rarely return something
]


# ==== Isort ====
[tool.isort]
skip = ["migrations/", "docs/", ".venv/"]
profile = "black"
py_version = 312
src_paths = ["src", "tests"]
line_length = 90
combine_as_imports = true
known_first_party = ["core", "src"]
known_domain = ["src.domain"]
known_infra = ["src.infra"]
known_application = ["src.application"]
known_presentation = ["src.presentation"]
known_bootstrap = ["src.bootstrap"]
sections = [
    "FUTURE",
    "STDLIB",
    "THIRDPARTY",
    "DOMAIN",
    "INFRA",
    "APPLICATION",
    "BOOTSTRAP",
    "PRESENTATION",
    "FIRSTPARTY",
    "LOCALFOLDER",
]
lines_after_imports = 2


# ==== Flake8 ==== (https://flake8.pycqa.org/en/latest/user/configuration.html)
[tool.flake8]
show-source = true
statistics = false
max-line-length = 90
select = ['WPS', 'E99']
extend-exclude = ['.venv']


# ==== Deadcode ==== (not implemented, runs manually)
[tool.deadcode]
exclude = [".venv", "tests", "migrations"]
